1 - Точки взаимодействия с сервером:
	
# "/users", GET, Получить список пользователей
# "/users", POST, Добавить пользователя
# "/users", PATCH, Изменить пользователя
# "/users/{username}", DELETE, Удалить пользователя
# "/users/{username}", HEAD, Проверить существование пользователя
# Во всех запросах, где это требуется, используется структура:
# { "username": "Name", "password": "Password", "description": "Description" }
# Обязательным является только поле - "username"
# X-Auth-Token - шестнадцатеричное представление хеша сформированного из имени и пароля с помощью sha256

2 - Создать основные тестовые сценарии и записать их в произвольном формате.
	2.1 - Реализация CRUD (create-read-update-delete)
	2.2 - Валидация статус-кодов
	2.3 - Валидация ответа
	2.4 - Валидация обязательных полей
	2.5 - Валидация недействительного JSON
	2.6 - Проверка дубликатов
			

3 - Выявить проблемы (не только явные ошибки), записать и выставить каждой степень ее серьезности (severity) с пояснениями.


***
S1 Блокирующая (Blocker)
S2 Критическая (Critical)
S3 Значительная (Major) 
S4 Незначительная (Minor)
S5 Тривиальная (Trivial) 

	3.1 - Неверно реализован метод Patch - нет возможности изменить данные у пользователя. Надо реализовать через /users/{username} (S2)
	3.2 - При создании повторной записи выдает код ответа 200, но запись не создает.Должен вернуть ошибку. (S3)
	3.2.1 - При попытки создать дубликат пользователя с обязательным ключом username , при наличии необязательного параметра description - изменяет поле description у существующего пользователя. Работает как обновление информации у пользователя. (S2)
	3.3 - При попытке удалить несуществующего юзера код ответа 200. Не критично, но лучше выдавать ошибку. (S4)
	3.4 - Нет возможности посмотреть определенного пользователя отдельно. Не реализован метод Get на users/{username} (S4)
	3.5 - При попытке создать пользователя с username - admin, токены перетираются. (S1)